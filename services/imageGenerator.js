const OpenAI = require("openai");

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, // Assure-toi que ta clÃ© API est bien dÃ©finie dans ton fichier .env
});

/**
 * GÃ©nÃ¨re une image avec OpenAI DALLÂ·E 3.
 * @param {string|null} prompt - Description de l'image Ã  gÃ©nÃ©rer (peut Ãªtre null).
 * @param {Array<string>} keywords - Liste de mots-clÃ©s pour affiner la gÃ©nÃ©ration.
 * @param {string} quality - QualitÃ© de lâ€™image (ex: "standard" ou "hd").
 * @param {string} size - Taille de l'image (ex: "1024x1024", "1792x1024").
 * @param {string} style - Style de lâ€™image (ex: "vivid" ou "natural").
 * @returns {Promise<string>} - URL de l'image gÃ©nÃ©rÃ©e.
 */
exports.generateImage = async (prompt, keywords = [], quality = "standard", size = "1024x1024", style = "vivid") => {
  try {
    // Si aucun prompt n'est fourni, construire un prompt Ã  partir des mots-clÃ©s
    let finalPrompt = prompt || "";
    
    if (!prompt && keywords.length > 0) {
      finalPrompt = `Une image reprÃ©sentant : ${keywords.join(", ")}.`;
    }

    const response = await openai.images.generate({
      model: "dall-e-3",
      prompt: finalPrompt,
      n: 1, // Nombre d'images Ã  gÃ©nÃ©rer (1 pour DALLÂ·E 3)
      quality, // QualitÃ© de lâ€™image
      size, // Taille de lâ€™image
      style, // Style de lâ€™image
      response_format: "url", // Retourne une URL au lieu d'une base64
    });

    return response.data[0].url; // Retourne l'URL de l'image gÃ©nÃ©rÃ©e
  } catch (error) {
    console.error("ğŸš¨ Erreur OpenAI (DALLÂ·E 3):", error);
    throw new Error("Erreur lors de la gÃ©nÃ©ration de l'image.");
  }
};
