const LumaAIService = require('../services/lumaAIService');

exports.generateVideo = async (req, res) => {
  const { prompt, model, resolution, duration } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required for video generation.' });
  }

  try {
    const videoUrl = await LumaAIService.generateVideo(prompt, model, resolution, duration);
    res.json({ message: 'Video generated successfully', videoUrl });
  } catch (error) {
    console.error('ğŸš¨ Error generating video:', error.message);
    res.status(500).json({ error: error.message });
  }
};

exports.getCredits = async (req, res) => {
  try {
    const credits = await LumaAIService.getCredits();
    res.json({ 
      message: 'CrÃ©dits rÃ©cupÃ©rÃ©s avec succÃ¨s', 
      details: `Il vous reste ${credits.credit_balance} crÃ©dits.` 
    });
  } catch (error) {
    console.error('ğŸš¨ Erreur lors de la rÃ©cupÃ©ration des crÃ©dits:', error.message);
    res.status(500).json({ error: 'Erreur lors de la rÃ©cupÃ©ration des crÃ©dits. Veuillez rÃ©essayer plus tard.' });
  }
};

exports.getGenerationById = async (req, res) => {
  const { id } = req.params;

  try {
    const generation = await LumaAIService.getGenerationById(id);
    res.json({ 
      message: 'GÃ©nÃ©ration rÃ©cupÃ©rÃ©e avec succÃ¨s', 
      generation 
    });
  } catch (error) {
    console.error('ğŸš¨ Erreur lors de la rÃ©cupÃ©ration de la gÃ©nÃ©ration:', error.message);
    res.status(500).json({ error: 'Erreur lors de la rÃ©cupÃ©ration de la gÃ©nÃ©ration. Veuillez rÃ©essayer plus tard.' });
  }
};

exports.listGenerations = async (req, res) => {
  try {
    const generations = await LumaAIService.listGenerations();
    res.json({ 
      message: 'Liste des gÃ©nÃ©rations rÃ©cupÃ©rÃ©e avec succÃ¨s', 
      generations 
    });
  } catch (error) {
    console.error('ğŸš¨ Erreur lors de la rÃ©cupÃ©ration des gÃ©nÃ©rations:', error.message);
    res.status(500).json({ error: 'Erreur lors de la rÃ©cupÃ©ration des gÃ©nÃ©rations. Veuillez rÃ©essayer plus tard.' });
  }
};

exports.deleteGeneration = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await LumaAIService.deleteGeneration(id);
    res.json({ 
      message: result.message 
    });
  } catch (error) {
    console.error('ğŸš¨ Erreur lors de la suppression de la gÃ©nÃ©ration:', error.message);
    res.status(500).json({ error: 'Erreur lors de la suppression de la gÃ©nÃ©ration. Veuillez rÃ©essayer plus tard.' });
  }
};
