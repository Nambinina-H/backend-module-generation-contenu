const LumaAIService = require('../services/lumaAIService');
const { generateVideoDescription } = require('../services/contentGenerator');

exports.generateVideo = async (req, res) => {
  const { prompt, resolution, duration } = req.body;

  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required for video generation.' });
  }

  try {
    const videoUrl = await LumaAIService.generateVideo(prompt, 'ray-2', resolution, duration); // Forcer "ray-2"
    res.json({ message: 'Video generated successfully', videoUrl });
  } catch (error) {
    console.error('üö® Error generating video:', error.message);
    res.status(500).json({ error: error.message });
  }
};

exports.getCredits = async (req, res) => {
  try {
    const credits = await LumaAIService.getCredits();
    res.json({ 
      message: 'Cr√©dits r√©cup√©r√©s avec succ√®s', 
      details: `Il vous reste ${credits.credit_balance} cr√©dits.` 
    });
  } catch (error) {
    console.error('üö® Erreur lors de la r√©cup√©ration des cr√©dits:', error.message);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des cr√©dits. Veuillez r√©essayer plus tard.' });
  }
};

exports.generateVideoDescription = async (req, res) => {
  const { keywords } = req.body;

  if (!keywords || !Array.isArray(keywords) || keywords.length === 0) {
    return res.status(400).json({ error: 'Merci de fournir une liste de mots-cl√©s.' });
  }

  try {
    const description = await generateVideoDescription(keywords);
    res.json({ message: 'Description g√©n√©r√©e avec succ√®s', description });
  } catch (error) {
    console.error('üö® Erreur lors de la g√©n√©ration de la description:', error.message);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration de la description. Veuillez r√©essayer plus tard.' });
  }
};

exports.getGenerationById = async (req, res) => {
  const { id } = req.params;

  try {
    const generation = await LumaAIService.getGenerationById(id);
    res.json({ 
      message: 'G√©n√©ration r√©cup√©r√©e avec succ√®s', 
      generation 
    });
  } catch (error) {
    console.error('üö® Erreur lors de la r√©cup√©ration de la g√©n√©ration:', error.message);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de la g√©n√©ration. Veuillez r√©essayer plus tard.' });
  }
};

exports.listGenerations = async (req, res) => {
  try {
    const generations = await LumaAIService.listGenerations();
    res.json({ 
      message: 'Liste des g√©n√©rations r√©cup√©r√©e avec succ√®s', 
      generations 
    });
  } catch (error) {
    console.error('üö® Erreur lors de la r√©cup√©ration des g√©n√©rations:', error.message);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des g√©n√©rations. Veuillez r√©essayer plus tard.' });
  }
};

exports.deleteGeneration = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await LumaAIService.deleteGeneration(id);
    res.json({ 
      message: result.message 
    });
  } catch (error) {
    console.error('üö® Erreur lors de la suppression de la g√©n√©ration:', error.message);
    res.status(500).json({ error: 'Erreur lors de la suppression de la g√©n√©ration. Veuillez r√©essayer plus tard.' });
  }
};

exports.extendVideo = async (req, res) => {
  const { id, prompt } = req.body;

  if (!id || !prompt) {
    return res.status(400).json({ error: 'ID de la vid√©o et prompt sont requis pour l\'extension.' });
  }

  try {
    const extendedVideo = await LumaAIService.extendVideo(id, prompt);
    res.json({ message: 'Vid√©o √©tendue avec succ√®s', extendedVideo });
  } catch (error) {
    console.error('üö® Erreur lors de l\'extension de la vid√©o:', error.message);
    res.status(500).json({ error: error.message });
  }
};

exports.reverseExtendVideo = async (req, res) => {
  const { id, prompt } = req.body;

  if (!id || !prompt) {
    return res.status(400).json({ error: 'ID de la vid√©o et prompt sont requis pour l\'extension invers√©e.' });
  }

  try {
    const reversedVideo = await LumaAIService.reverseExtendVideo(id, prompt);
    res.json({ message: 'Vid√©o √©tendue en sens inverse avec succ√®s', reversedVideo });
  } catch (error) {
    console.error('üö® Erreur lors de l\'extension invers√©e de la vid√©o:', error.message);
    res.status(500).json({ error: error.message });
  }
};

exports.handleCallback = async (req, res) => {
  const { id, state, assets, failure_reason } = req.body; // Donn√©es envoy√©es par LumaAI

  console.log('üì• Callback re√ßu:', { id, state, assets, failure_reason }); // Log pour v√©rifier le callback

  if (!id || !state) {
    return res.status(400).json({ error: 'ID et √©tat sont requis.' });
  }

  try {
    // Mettre √† jour l'√©tat de la g√©n√©ration dans la base de donn√©es
    const updateData = { status: state };
    if (state === 'completed') {
      updateData.videoUrl = assets?.video; // URL de la vid√©o g√©n√©r√©e
    } else if (state === 'failed') {
      updateData.error = failure_reason; // Raison de l'√©chec
    }

    // Exemple de mise √† jour dans Supabase
    const { error } = await supabase
      .from('content')
      .update(updateData)
      .eq('id', id);

    if (error) {
      console.error('Erreur lors de la mise √† jour de la g√©n√©ration:', error);
      return res.status(500).json({ error: 'Erreur interne.' });
    }

    res.json({ message: 'Callback trait√© avec succ√®s.' });
  } catch (error) {
    console.error('Erreur lors du traitement du callback:', error);
    res.status(500).json({ error: 'Erreur interne.' });
  }
};

exports.addAudio = async (req, res) => {
  const { id } = req.params;
  const { prompt, negativePrompt } = req.body;

  if (!id || !prompt) {
    return res.status(400).json({ error: 'ID de la g√©n√©ration et prompt sont requis pour ajouter de l\'audio.' });
  }

  try {
    const result = await LumaAIService.addAudioToGeneration(id, prompt, negativePrompt);
    res.json({ message: 'Audio ajout√© avec succ√®s √† la g√©n√©ration', result });
  } catch (error) {
    console.error('üö® Erreur lors de l\'ajout d\'audio √† la g√©n√©ration:', error.message);
    res.status(500).json({ error: error.message });
  }
};
