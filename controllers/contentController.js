// controllers/contentController.js
const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);
const { generateContent } = require('../services/contentGenerator');

exports.generate = async (req, res) => {
  const { type, keywords, personalization } = req.body;
  const userId = req.user.id;

  if (!type || !keywords || !Array.isArray(keywords)) {
    return res.status(400).json({ error: 'Merci de fournir un type et un tableau de mots-clÃ©s.' });
  }

  try {
    // VÃ©rifier la gÃ©nÃ©ration du contenu
    const content = await generateContent(type, keywords, personalization);
    console.log("ğŸ“Œ Contenu gÃ©nÃ©rÃ© :", content); // Debugging

    // VÃ©rifier si le contenu est vide
    if (!content) {
      return res.status(500).json({ error: "Erreur lors de la gÃ©nÃ©ration du contenu." });
    }

    // Insertion dans Supabase
    const { data, error } = await supabase
      .from('content')
      .insert([{ type, keywords, content, personalization, status: 'generated', user_id: userId }])
      .select();  // Ajout de `select()` pour rÃ©cupÃ©rer les donnÃ©es insÃ©rÃ©es

    if (error) {
      console.error('ğŸš¨ Erreur Supabase:', error);
      return res.status(500).json({ error: error.message });
    }

    console.log("ğŸ“Œ DonnÃ©es insÃ©rÃ©es dans Supabase :", data); // Debugging

    res.json({ message: 'Contenu gÃ©nÃ©rÃ© avec succÃ¨s', content: data });
  } catch (error) {
    console.error('ğŸš¨ Erreur serveur:', error);
    res.status(500).json({ error: error.message });
  }
};


// RÃ©cupÃ©rer les contenus de l'utilisateur connectÃ©
exports.listUserContent = async (req, res) => {
  const userId = req.user.id; // ID de l'utilisateur connectÃ©

  try {
    // RÃ©cupÃ©rer uniquement les contenus crÃ©Ã©s par l'utilisateur
    const { data, error } = await supabase
      .from('content')
      .select('*')
      .eq('user_id', userId); // Filtrer par utilisateur

    if (error) {
      console.error('Erreur Supabase:', error);
      return res.status(500).json({ error: error.message });
    }

    res.json({ message: 'Contenus rÃ©cupÃ©rÃ©s avec succÃ¨s', contents: data });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


// Modifie les contenus de l'utilisateur connectÃ©
exports.updateContent = async (req, res) => {
  const { contentId } = req.params; // ID du contenu Ã  modifier
  const { type, keywords, personalization, status } = req.body;
  const userId = req.user.id; // ID de lâ€™utilisateur connectÃ©

  try {
    // VÃ©rifier si le contenu appartient Ã  l'utilisateur
    const { data: existingContent, error: fetchError } = await supabase
      .from('content')
      .select('user_id')
      .eq('id', contentId)
      .single();

    if (fetchError || !existingContent) {
      return res.status(404).json({ error: 'Contenu introuvable' });
    }

    if (existingContent.user_id !== userId) {
      return res.status(403).json({ error: 'AccÃ¨s refusÃ©. Vous ne pouvez modifier que votre propre contenu.' });
    }

    // Mise Ã  jour du contenu
    const { data, error } = await supabase
      .from('content')
      .update({ type, keywords, personalization, status })
      .eq('id', contentId)
      .select();

    if (error) {
      console.error('ğŸš¨ Erreur lors de la mise Ã  jour du contenu :', error);
      return res.status(500).json({ error: error.message });
    }

    res.json({ message: 'Contenu mis Ã  jour avec succÃ¨s', content: data });
  } catch (error) {
    console.error('ğŸš¨ Erreur serveur :', error);
    res.status(500).json({ error: error.message });
  }
};


// Supprime les contenus de l'utilisateur connectÃ©
exports.deleteContent = async (req, res) => {
  const { contentId } = req.params; // ID du contenu Ã  supprimer
  const userId = req.user.id; // ID de lâ€™utilisateur connectÃ©

  try {
    // VÃ©rifier si le contenu appartient Ã  l'utilisateur
    const { data: existingContent, error: fetchError } = await supabase
      .from('content')
      .select('user_id')
      .eq('id', contentId)
      .single();

    if (fetchError || !existingContent) {
      return res.status(404).json({ error: 'Contenu introuvable' });
    }

    if (existingContent.user_id !== userId) {
      return res.status(403).json({ error: 'AccÃ¨s refusÃ©. Vous ne pouvez supprimer que votre propre contenu.' });
    }

    // Suppression du contenu
    const { error } = await supabase.from('content').delete().eq('id', contentId);

    if (error) {
      console.error('ğŸš¨ Erreur lors de la suppression du contenu :', error);
      return res.status(500).json({ error: error.message });
    }

    res.json({ message: 'Contenu supprimÃ© avec succÃ¨s' });
  } catch (error) {
    console.error('ğŸš¨ Erreur serveur :', error);
    res.status(500).json({ error: error.message });
  }
};

