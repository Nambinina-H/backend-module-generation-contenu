const { supabase } = require('../services/supabaseService'); // Ensure correct import

exports.verifyToken = async (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    console.error("üö® Token manquant dans l'en-t√™te de la requ√™te");
    return res.status(401).json({ error: 'Acc√®s refus√©. Token manquant.' });
  }

  // V√©rifier le token et r√©cup√©rer l'utilisateur
  const { data, error } = await supabase.auth.getUser(token);

  if (error || !data?.user) {
    console.error("üö® Erreur de validation du token :", error || "Utilisateur non trouv√©");
    return res.status(401).json({ error: 'Token invalide ou expir√©.' });
  }

  // R√©cup√©rer le r√¥le de l'utilisateur depuis `profiles`
  const { data: userProfile, error: roleError } = await supabase
    .from('profiles')
    .select('role')
    .eq('user_id', data.user.id)
    .single();

  if (roleError || !userProfile) {
    console.error("üö® Erreur lors de la r√©cup√©ration du r√¥le :", roleError);
    return res.status(500).json({ error: 'Impossible de r√©cup√©rer le r√¥le utilisateur.' });
  }

  // V√©rifier si l'utilisateur est connect√© √† WordPress
  const { data: wordpressConfig, error: wordpressError } = await supabase
    .from('api_configurations')
    .select('*')
    .eq('user_id', data.user.id)
    .eq('platform', 'wordPressClient')
    .single();

  const isWordPressConnected = !wordpressError && wordpressConfig;

  // Ajouter les infos utilisateur, son r√¥le et l'√©tat de connexion WordPress √† `req.user`
  req.user = { ...data.user, role: userProfile.role, isWordPressConnected };
  next();
};
